(use gauche.cgen.unit)

(select-module gauche.cgen.unit)
(export <cgen-unit-stub> cgen-emit-stub cgen-stub)

(define-class <cgen-unit-stub> (<cgen-unit>)
  ((stub-file :init-keyword :stub-file :init-value #f)
   (stub-preamble :init-keyword :stub-preamble
                  :init-value '(";; Generated by gauche.cgen $Revision: 1.7 $ "))
   ))

(define-method cgen-unit-stub-file ((unit <cgen-unit-stub>))
  (~ unit'stub-file))

(define-method cgen-emit-stub ((unit <cgen-unit-stub>))
  (and-let* ([stub-file (cgen-unit-stub-file unit)])
    (cgen-with-output-file stub-file
                           (lambda ()
                             (cond [(~ unit'stub-preamble) => emit-raw])
                             (cgen-emit-part unit 'stub)
                             ))))

(define-method cgen-emit-stub ((node <cgen-node>)) #f)

(define-method cgen-emit ((node <cgen-node>) part)
  ;; A kludge for emitting cpp-condition only when necessary.
  (define (method-overridden? gf)
    (and-let* ([meths (compute-applicable-methods gf (list node))]
               [ (not (null? meths)) ])
      (match (~ (car meths)'specializers)
        [((? (cut eq? <> <cgen-node>))) #f]
        [_ #t])))
  (define (with-cpp-condition gf)
    (cond [(~ node'cpp-conditions)
           => (^(cppc) (cond [(method-overridden? gf)
                              (for-each (cut print "#if " <>) cppc)
                              (gf node)
                              (for-each (cut print "#endif /* "<>" */")
                                        (reverse cppc))]
                         [else (gf node)]))]
      [else (gf node)]))
  (case part
    [(stub)		(with-cpp-condition cgen-emit-stub)]
    [(extern) (with-cpp-condition cgen-emit-xtrn)]
    [(decl)   (with-cpp-condition cgen-emit-decl)]
    [(body)   (with-cpp-condition cgen-emit-body)]
    [(init)   (with-cpp-condition cgen-emit-init)]))



(define-class <cgen-raw-stub> (<cgen-node>)
  ((code :init-keyword :code :init-value "")))
(define-method cgen-emit-stub ((node <cgen-raw-stub>))
  (emit-raw (~ node'code)))

(define (cgen-stub . code)
  (cgen-add! (make <cgen-raw-stub> :code code)))
