;;;
;;; cv_objdetectlib.stub
;;;
;;; MIT License
;;; Copyright 2011-2012 aharisu
;;; All rights reserved.
;;;
;;; Permission is hereby granted, free of charge, to any person obtaining a copy
;;; of this software and associated documentation files (the "Software"), to deal
;;; in the Software without restriction, including without limitation the rights
;;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;;; copies of the Software, and to permit persons to whom the Software is
;;; furnished to do so, subject to the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be included in all
;;; copies or substantial portions of the Software.
;;;
;;;
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;;; SOFTWARE.
;;;
;;;
;;; aharisu
;;; foo.yobina@gmail.com
;;;

"

#include \"gauche_cv_objdetect.h\"
#include <opencv2/objdetect/objdetect.hpp>

#include \"../core_type.gen.h\"
#include \"objdetect_type.gen.h\"

typedef void* _pvoid_t;
typedef unsigned char _char_t;
typedef signed char _schar_t;
typedef signed short _short_t;
typedef unsigned short _ushort_t;
typedef int _int_t;
typedef unsigned int _uint_t;
typedef float _float_t;
typedef double _double_t;

"

(include "objdetect_type.gen.stub.header")
(include "../cv_type.stub.header")
(include "../core_type.gen.stub.header")
(include "../macro.stub.header")

(define-cclass <cv-haar-classifier-cascade>
  :built-in
  "ScmCvHaarClassifierCascade*" "Scm_CvHaarClassifierCascadeClass"
  ("Scm_CvObjectClass")
  (;;slot
   (count :type <fixnum>
          :setter #f)
   (orig-window-size :type <cv-size>
                     :setter #f)
   (real-window-size :type <cv-size>
                     :setter #f)
   (scale :type <real>
          :setter #f)
   ))

(define-cclass <cv-avg-comp>
  :built-in :struct
  "ScmCvAvgComp" "Scm_CvAvgCompClass"
  ("Scm_CvStructClass")
  (;;slot
   (rect :type <cv-rect>
         :setter #f)
   (neighbors :type <int>
              :setter #f)
   )
  (printer #t)
  (compare #t)
  (c-core-type "CvAvgComp")
  )

(define-cproc cv-load-haar-classifier-cascade (directory::<const-cstring> orig-window-size::<cv-size>) :: <cv-haar-classifier-cascade>
  (result (cvLoadHaarClassifierCascade directory orig-window-size)))

(define-cproc cv-release-haar-classifier-cascade (cascade::<cv-haar-classifier-cascade>) :: <void>
  (when cascade
    (cvReleaseHaarClassifierCascade (& cascade))
    (set! (SCM_CVHAARCLASSIFIERCASCADE_DATA cascade-scm) 0)))


(define-enum CV_HAAR_DO_CANNY_PRUNING)
(define-enum CV_HAAR_SCALE_IMAGE)
(define-enum CV_HAAR_FIND_BIGGEST_OBJECT)
(define-enum CV_HAAR_DO_ROUGH_SEARCH)

;;;;;
;; @param ((min-size (c "SCM_UNDEFINED")) >> (min-size c:null))
;; @param ((max-size (c "SCM_UNDEFINED")) >> (max-size c:null))
(define-cproc cv-haar-detect-objects (image::<cv-arr> 
                                       cascade::<cv-haar-classifier-cascade>
                                       storage::<cv-mem-storage> 
                                       :optional
                                       (scale-factor::<real> 1.1)
                                       (min-neighbors::<fixnum> 3)
                                       (flags::<fixnum> 0)
                                       (min-size (c "SCM_UNDEFINED"))
                                       (max-size (c "SCM_UNDEFINED"))) :: <cv-seq>
  (ENSURE_NOT_NULL image)
  (ENSURE_NOT_NULL cascade)
  (ENSURE_NOT_NULL storage)
  (let* ([min-size-obj::CvSize]
         [max-size-obj::CvSize])
    (undef-or-obj min-size min-size-obj <cv-size> (cvSize 0 0))
    (undef-or-obj max-size max-size-obj <cv-size> (cvSize 0 0))
    (result (cvHaarDetectObjects image cascade storage scale-factor min-neighbors flags min-size-obj max-size-obj))))
                                       
(define-cproc cv-set-images-for-haar-classifier-cascade (cascade::<cv-haar-classifier-cascade>
                                                          sum::<cv-arr> sqsum::<cv-arr>
                                                          tilted-sum::<cv-arr> scale::<real>) :: <void>
  (ENSURE_NOT_NULL cascade)
  (ENSURE_NOT_NULL sum)
  (ENSURE_NOT_NULL sqsum)
  (ENSURE_NOT_NULL tilted-sum)
  (cvSetImagesForHaarClassifierCascade cascade sum sqsum tilted-sum scale))

(define-cproc cv-run-haar-classifier-cascade (cascade::<cv-haar-classifier-cascade>
                                               pt::<cv-point>
                                               :optional
                                               (start-stage::<fixnum> 0)) :: <int>
  (ENSURE_NOT_NULL cascade)
  (result (cvRunHaarClassifierCascade cascade pt start-stage)))


;****************************************************************************************\
;*                         Latent SVM Object Detection functions                          *
;****************************************************************************************/

;;;;;
;;@slot l level in the feature pyramid
(define-cclass <cv-lsvm-filter-position> 
  :built-in :struct
  "ScmCvLSVMFilterPosition" "Scm_CvLSVMFilterPositionClass"
  ("Scm_CvStructClass")
  (;;slot
   (x :type <int>
         :setter #f)
   (y :type <int>
         :setter #f)
   (l :type <int>
         :setter #f)
   )
  (printer #t)
  (compare #t)
  (c-core-type "CvLSVMFilterPosition")
  )

;;;;;
;;structure contains internal representation of trained Latent SVM detector
;;@slot num-filters total number of filters (root plus part) in model 
;;@slot num-components number of components in model
;;@slot score-threshold confidence level threshold
(define-cclass <cv-latent-svm-detector>
  :built-in
  "ScmCvLatentSvmDetector*" "Scm_CvLatentSvmDetectorClass"
  ("Scm_CvObjectClass")
  (;;slot
   (num-filters :type <fixnum>
                :setter #f)
   (num-components :type <fixnum> 
                   :setter #f)
   (score-threshold :type <real>
                    :setter #f)
   )
  )

;;;;;
;;@slot rect bounding box for a detected object
;;@slot score confidence level
(define-cclass <cv-object-detection>
  :built-in :struct
  "ScmCvObjectDetection" "Scm_CvObjectDetectionClass"
  ("Scm_CvStructClass")
  (;;slot
   (rect :type <cv-rect>
         :setter #f)
   (score :type <real>
          :setter #f)
   )
  (printer #t)
  (compare #t)
  (c-core-type "CvObjectDetection")
  )

;;;;;
;;load trained detector from a file
;;@param filename path to the file containing the parameters of trained Latent SVM detector
;;@return trained Latent SVM detector in internal representation
(define-cproc cv-load-latent-svm-detector (filename::<const-cstring>) :: <top>
  (let* ([detector::CvLatentSvmDetector* (cvLoadLatentSvmDetector filename)])
    (if detector
      (result (boxing detector <cv-latent-svm-detector>))
      (result (boxing 0 <boolean>)))))

;;;;;
;;release memory allocated for CvLatentSvmDetector structure
;;@param detect <cv-latent-svm-detector> structure to be released
(define-cproc cv-release-latent-svm-detector (detector::<cv-latent-svm-detector>) :: <void>
  (when detector
    (cvReleaseLatentSvmDetector (& detector))
    (set! (SCM_CVLATENTSVMDETECTOR_DATA detector-scm) 0)))

;;;;;
;;find rectangular regions in the given image that are likely 
;;to contain objects and corresponding confidence levels
;;@param image image to detect objects in
;;@param detector Latent SVM detector in internal representation
;;@param storage memory storage to store the resultant sequence of the object candidate rectangles
;;@param overlap-threshold threshold for the non-maximum suppression algorithm = 0.5f [here will be the reference to original paper]
(define-cproc cv-latent-svm-detect-objects (image::<iplimage>
                                             detector::<cv-latent-svm-detector>
                                             storage::<cv-mem-storage>
                                             :optional
                                             (overlap-threshold::<real> 0.5)
                                             (num-threads::<fixnum> -1)) :: <top>
  (ENSURE_NOT_NULL image)
  (ENSURE_NOT_NULL detector)
  (ENSURE_NOT_NULL storage)
  (let* ([seq::CvSeq*])
    (.if OPENCV2_2
         (set! seq (cvLatentSvmDetectObjects image detector storage overlap-threshold))
         (set! seq (cvLatentSvmDetectObjects image detector storage overlap-threshold num-threads)))
    (if seq
      (result (boxing seq <cv-seq>))
      (result (boxing 0 <boolean>)))))


