;;;
;;; cv_features2dlib.stub
;;;
;;; MIT License
;;; Copyright 2011-2012 aharisu
;;; All rights reserved.
;;;
;;; Permission is hereby granted, free of charge, to any person obtaining a copy
;;; of this software and associated documentation files (the "Software"), to deal
;;; in the Software without restriction, including without limitation the rights
;;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;;; copies of the Software, and to permit persons to whom the Software is
;;; furnished to do so, subject to the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be included in all
;;; copies or substantial portions of the Software.
;;;
;;;
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;;; SOFTWARE.
;;;
;;;
;;; aharisu
;;; foo.yobina@gmail.com
;;;

"

#include \"gauche_cv_features2d.h\"
#include <opencv2/features2d/features2d.hpp>

#include \"../core_type.gen.h\"
#include \"features2d_type.gen.h\"

typedef void* _pvoid_t;
typedef unsigned char _char_t;
typedef signed char _schar_t;
typedef signed short _short_t;
typedef unsigned short _ushort_t;
typedef int _int_t;
typedef unsigned int _uint_t;
typedef float _float_t;
typedef double _double_t;

"

(include "features2d_type.gen.stub.header")
(include "../cv_type.stub.header")
(include "../core_type.gen.stub.header")
(include "../macro.stub.header")


(define-cclass <cv-surf-point>
  :built-in :struct
  "ScmCvSURFPoint" "Scm_CvSURFPointClass"
  ("Scm_CvStructClass")
  (;;slot
   (pt :type <cv-point-2d32f>
       :setter #f)
   (laplacian :type <fixnum>
              :setter #f)
   (size :type <fixnum>
         :setter #f)
   (dir :type <real>
         :setter #f)
   (hessian :type <real>
            :setter #f)
   )
  (printer #t)
  (compare #t)
  (c-core-type "CvSURFPoint")
  )

(define-cproc make-cv-surf-point (pt::<cv-point-2d32f> laplacian::<fixnum> size::<fixnum>
                                                         :optional
                                                         (dir::<fixnum> 0)
                                                         (hessian::<real> 0)) :: <cv-surf-point>
  (result (cvSURFPoint pt laplacian size dir hessian)))


(define-cclass <cv-surf-params>
  :built-in :struct
  "ScmCvSURFParams" "Scm_CvSURFParamsClass"
  ("Scm_CvStructClass")
  (;;slot
   (extended :type <fixnum>
             :setter #f)
   (hessian-threshold :type <real>
                      :setter #f
                      :c-name "hessianThreshold")
   (n-octaves :type <fixnum>
              :setter #f
              :c-name "nOctaves")
   (n-octave-layers :type <fixnum>
                    :setter #f
                    :c-name "nOctaveLayers")
   )
  (printer #t)
  (compare #t)
  (c-core-type "CvSURFParams")
  )

(define-cproc cv-surf-params (hessian-threshold::<real>
                              :optional
                              (extended::<fixnum> 0)) :: <cv-surf-params>
  (result (cvSURFParams hessian-threshold extended)))

;;;;;
;; If use-provided-key-pts = #t, keypoints are not detected, but descriptors are computed
;;  at the locations provided in keypoints (a <cv-seq> of <cv-surf-point>).
(define-cproc cv-extract-srfi (img::<cv-arr> mask::<top>
                                             storage::<cv-mem-storage> params::<cv-surf-params>
                                             :optional
                                             (use-provided-key-pts::<boolean> #f)) :: <cv-seq>
  (ENSURE_NOT_NULL img)
  (let* ([mask-obj::CvArr*]
         [seq::CvSeq*])
    (undef-or-cvarr mask mask-obj)
    (cvExtractSURF img mask-obj (& seq) NULL storage params use-provided-key-pts)
    (result seq)))

;;;;;
;; If use-provided-key-pts = #t, keypoints are not detected, but descriptors are computed
;;  at the locations provided in keypoints (a <cv-seq> of <cv-surf-point>).
(define-cproc cv-extract-srfi-with-descriptors (img::<cv-arr> mask::<top>
                                                              storage::<cv-mem-storage> params::<cv-surf-params>
                                                              :optional
                                                              (use-provided-key-pts::<boolean> #f))
              :: (<cv-seq> <cv-seq>)
  (ENSURE_NOT_NULL img)
  (let* ([mask-obj::CvArr*]
         [seq::CvSeq*]
         [descriptors::CvSeq*])
    (undef-or-cvarr mask mask-obj)
    (cvExtractSURF img mask-obj (& seq) (& descriptors) storage params use-provided-key-pts)
    (result seq descriptors)))


